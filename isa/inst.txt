note: 
    simm stands for sign-extended (signed) imm
    uimm stands for zero-extended (unsigned) imm

loads
  C lw rd, [rs1 + rs2 + simm]
  C lh rd, [rs1 + rs2 + simm]
  C lq rd, [rs1 + rs2 + simm]
  C lb rd, [rs1 + rs2 + simm]

  C lsh rd, [rs1 + rs2 + simm]
  C lsq rd, [rs1 + rs2 + simm]
  C lsb rd, [rs1 + rs2 + simm]

  C llw rd, [rs1 + rs2 + simm]
  C llh rd, [rs1 + rs2 + simm]
  C llq rd, [rs1 + rs2 + simm]
  C llb rd, [rs1 + rs2 + simm]

stores
  C sw [rs1 + rs2 + simm], rs3
  C sh [rs1 + rs2 + simm], rs3
  C sq [rs1 + rs2 + simm], rs3
  C sb [rs1 + rs2 + simm], rs3

  C scw [rs1 + rs2 + simm], rs3
  C sch [rs1 + rs2 + simm], rs3
  C scq [rs1 + rs2 + simm], rs3
  C scb [rs1 + rs2 + simm], rs3

memory fences
  A lfence
  A sfence

arithmetic
  B add   rd, rs1, rs2              rd = rs1 + rs2
  B sub   rd, rs1, rs2              rd = rs1 - rs2
  D imul  rl, rh, rs1, rs2          (lo: rl, hi: rh) = rs1 * rs2
  D umul  rl, rh, rs1, rs2          (lo: rl, hi: rh) = unsigned rs1 * rs2
  D idiv  rq, rr, rs1, rs2          (quo: rq, rem: rr) = rs1 / rs2
  D udiv  rq, rr, rs1, rs2          (quo: rq, rem: rr) = unsigned rs1 / rs2

  B addi  rd, rs1, imm              rd = rs1 + imm
  B subi  rd, rs1, imm              rd = rs1 - imm
  C imuli rl, rh, rs1, imm          (lo: rl, hi: rh) = rc * simm
  C umuli rl, rh, rs1, imm          (lo: rl, hi: rh) = unsigned rc * uimm
  C idivi rq, rr, rs1, imm          (quo: rq, rem: rr) = rc / simm
  C udivi rq, rr, rs1, imm          (quo: rq, rem: rr) = unsigned rc / uimm


bitwise logic
  C shl rd, rs1, rs2, imm           ra = rs1 << (rs2 + uimm)
  C lsr rd, rs1, rs2, imm           ra = usigned rs1 >> (rs2 + uimm)
  C asr rd, rs1, rs2, imm           ra = rs1 >> (rs2 + uimm)
  C rot rd, rs1, rs2, imm           ra = rotate rs1 by (rs2 + simm)
  B csb rd, rs1                     ra = count set bits of rs1
  B clz rd, rs1                     ra = count leading zeroes of rs1
  B ctz rd, rs1                     ra = count trailing zeroes of rs1
  C ext rd, rs1, rs2                ra = extract bits from rs1 with mask rs2
  C dep rd, rs1, rs2                ra = deposit bits from rs1 with mask rs2
  B rev rd, rs1, imm                ra = reverse bits of rs1 in chunks of 2^uimm

  C and  rd, rs1, rs2               rd = rs1 & rs2
  C or   rd, rs1, rs2               rd = rs1 | rs2
  C xor  rd, rs1, rs2               rd = rs1 ~ rs2

  B andi rd, rs1, imm               rd = rs1 & uimm
  B ori  rd, rs1, imm               rd = rs1 | uimm
  B xori rd, rs1, imm               rd = rs1 ~ uimm

comparison
  C seq  rd, rs1, rs2               rd = rs1 == rs2
  C slt  rd, rs1, rs2               rd = rs1 < rs2
  C sle  rd, rs1, rs2               rd = rs1 <= rs2
  C uslt rd, rs1, rs2               rd = unsigned rs1 < rs2
  C usle rd, rs1, rs2               rd = unsigned rs1 <= rs2

  B seqi  rd, rs, imm                rd = rs == simm
  B slti  rd, rs, imm                rd = rs < uimm
  B slei  rd, rs, imm                rd = rs <= uimm
  B uslti rd, rs, imm                rd = unsigned rs1 < simm
  B uslei rd, rs, imm                rd = unsigned rs1 <= simm

control flow
  A bz  rs, imm                     if rs == 0 { ip += simm * 4; }
  A bnz rs, imm                     if rs != 0 { ip += simm * 4; }

  B jal rs2, imm                    lp = ip; ip = (rs2 + simm * 4)
  A jmp rs, imm                     ip = (rs + simm * 4)

control
  A syscall                         trigger system call interrupt
  A breakpt                         trigger breakpoint interrupt
  A wait                            wait for external interrupt
  A spin                            hint spinlock to processor
  A iret                            
  A lctrl rd, imm                   rd = control register uimm
  A sctrl imm, rs                   control register uimm = rs

-------------- VECTOR INSTRUCTIONS!!!! -------------- 

config
  A vstride rs, imm                 set vector element stride to 2^(rs + uimm)

loads
  C vl   va, rb, rc, imm            va = mem[rb] with (rc + uimm) elements
  C vset vb, rc, imm, ra            vb[rc + uimm] = ra
  C vget ra, vb, rc, imm            ra = vb[rc + uimm]
  C vcpy va, vb, rc, imm            va = copy vb[rc + uimm] to all elements

stores
  C vs   va, rb, rc, imm            mem[rb] with (rc + uimm) elements = va

integer arithmetic
  C vadd  vd, vs1, vs2
  C vsub  vd, vs1, vs2
  D vimul vl, vh, vs1, vs2
  D vumul vl, vh, vs1, vs2
  D vidiv vq, vr, vs1, vs2
  D vudiv vq, vr, vs1, vs2
  C vcmp  vd, vs1, vs2, imm         element-wise compare with comparison mode, uimm =
        0   ==
        1   !=
        2   <
        3   >=
        4   >
        5   <=
        6   unsigned <
        7   unsigned >=
        8   unsigned >
        9   unsigned <=

bitwise logic
  C vand vd, vs2, vs1
  C vor  vd, vs2, vs1
  C vxor vd, vs2, vs1
  B vnot vd, vs
  B vcsb rd, vs
  B vclz rd, vs
  B vctz rd, vs

floating point arithmetic
  C vfadd vd, vs1, vs2
  C vfsub vd, vs1, vs2
  C vfmul vd, vs1, vs2
  C vfdiv vd, vs1, vs2
  B vfcnv vd, vs, imm               convert vs to floats with element stride 2^imm
  C vfcmp vd, vs1, vs2, imm         element-wise compare with comparison mode uimm =
        0   ==
        1   !=
        2   <
        3   >=
        4   >
        5   <=
  B vfclass vd, vs                  classify floating point, vd[i] = 
        0   when vs[i] is quiet NaN
        1   when vs[i] is signaling NaN
        2   when vs[i] is -inf
        3   when vs[i] is -normal
        4   when vs[i] is -subnormal
        5   when vs[i] is -0
        6   when vs[i] is +0
        7   when vs[i] is +subnormal
        8   when vs[i] is +normal
        9   when vs[i] is +inf